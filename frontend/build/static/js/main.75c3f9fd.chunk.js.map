{"version":3,"sources":["assets/logo.svg","components/sitenav.tsx","routes/cards/join.tsx","assets/Sleepy.png","routes/cards/session-end.tsx","routes/cards/start.tsx","assets/chrome.svg","assets/edge.svg","assets/FaceWithMask.png","assets/LiveDemo.png","assets/Selfie.png","assets/StarEyes.png","routes/home/home.tsx","database/database.ts","assets/Wink.png","network/types.ts","routes/recordings/recordings.tsx","network/signallingConnection.ts","network/client.ts","network/server.ts","routes/room/room.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["SiteNav","id","to","src","Logo","alt","className","Join","htmlFor","title","placeholder","pattern","maxLength","SessionEnd","draggable","Sleepy","Start","Home","LiveDemo","Selfie","StarEyes","FaceWithMask","chrome","edge","localforage","config","driver","INDEXEDDB","name","version","size","storeName","description","DataBase","_recordingsDb","_metadataDb","this","createInstance","allMetaData","iterate","value","key","iterationNumber","push","then","ret","catch","err","console","log","_uuid","getItem","retval","date","duration","people","mp4","uuid_v4","metaData","setItem","removeItem","_instance","SOURCE_TYPE","SIGNALLING_MESSAGE_TYPE","Recordings","instance","initDB","loadVideos","a","getAllMetaData","res","setRecordings","useState","recordings","uploadVideo","length","Wink","onClick","Date","Blob","map","item","getMonth","getDate","getFullYear","toLocaleString","timeZone","Intl","DateTimeFormat","resolvedOptions","hour","minute","hour12","JSON","stringify","join","getRecording","alert","concat","deleteVideo","SignallingConnection","signalingConnection","onSignalingMessage","event","type","send","data","Promise","resolve","reject","OPEN","close","WebSocket","window","location","hostname","onmessage","onclose","onerror","error","onopen","MESSAGE_TYPE","CONFIG","iceServers","urls","username","credential","Client","users","serverChannel","serverConn","candidates","userId","connect","sessionId","signalingConnect","RTCPeerConnection","createDataChannel","negotiated","makingOffer","ignoreOffer","addEventListener","connectionState","iceConnectionState","onicecandidate","candidate","ICE","onnegotiationneeded","setLocalDescription","SDP","localDescription","message","parse","offerCollision","signalingState","setRemoteDescription","addIceCandidate","oniceconnectionstatechange","restartIce","i","signalingSend","splice","CONNECT","Server","sessionCreateResolve","onVideo","pc","dataChannel","ontrack","user","String","Math","floor","random","padStart","sources","SESSION_CREATE","Session","client","server","setSessionId","videoRef","createRef","ref","document","getElementById","srcObject","streams","start","onChange","target","App","path","Boolean","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.75c3f9fd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.3ccc430f.svg\";","import { Component, FunctionComponent } from \"react\";\r\nimport \"./sitenav.css\";\r\nimport Logo from \"../assets/logo.svg\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport const SiteNav: FunctionComponent = () => {\r\n  return (\r\n    <nav id=\"navbar\">\r\n      <Link to=\"/\">\r\n        <img src={Logo} alt=\"Live Demo Logo\"></img>\r\n      </Link>\r\n      <div className=\"nav-links\">\r\n        <Link to=\"/session-end\">\r\n          <h5>(TEMP) session-end</h5>\r\n        </Link>\r\n        <Link to=\"/room\">\r\n          <h5>(TEMP) room</h5>\r\n        </Link>\r\n        <Link to=\"/recordings\">\r\n          <h5>Recordings</h5>\r\n        </Link>\r\n        <Link to=\"/join\">\r\n          <h5>Join session</h5>\r\n        </Link>\r\n        <Link to=\"/start\">\r\n          <h5 className=\"outlined-button\">Start session</h5>\r\n        </Link>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n","import { FunctionComponent } from \"react\";\r\nimport { SiteNav } from \"../../components/sitenav\";\r\nimport './join.css';\r\n\r\ninterface Props {}\r\nconst Join: FunctionComponent<Props> = ({}) => {\r\n  return (\r\n    <div className=\"max-width\">\r\n      <SiteNav></SiteNav>\r\n      <div className=\"dialog\">\r\n        <div className=\"form\">\r\n          <h3>Join session</h3>\r\n          <label\r\n            htmlFor=\"display-name\"\r\n            className=\"input-label\"\r\n            title=\"Enter your email to log in\"\r\n          >\r\n            Display name\r\n          </label>\r\n          <input\r\n            id=\"display-name\"\r\n            placeholder=\"Display name (visible to other users)\"\r\n            className=\"input\"\r\n            // style=\"margin-bottom: 20px;\"\r\n            // onKeyPress=\"return /[a-z]/i.test(event.key)\"\r\n          ></input>\r\n          <label\r\n            htmlFor=\"session-code\"\r\n            className=\"input-label\"\r\n            title=\"Enter your email to log in\"\r\n          >\r\n            Session code\r\n          </label>\r\n          <input\r\n            id=\"session-code\"\r\n            placeholder=\"Six digit session code\"\r\n            className=\"input\"\r\n            pattern=\"\\d*\"\r\n            maxLength={6}\r\n          ></input>\r\n        </div>\r\n        <button className=\"primary-btn\">Join session</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Join;\r\n","export default __webpack_public_path__ + \"static/media/Sleepy.d38f69f1.png\";","import { FunctionComponent } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { SiteNav } from \"../../components/sitenav\";\r\nimport Sleepy from \"../../assets/Sleepy.png\";\r\nimport \"../recordings/recordings.css\";\r\n\r\ninterface Props {}\r\nconst SessionEnd: FunctionComponent<Props> = ({}) => {\r\n  return (\r\n    <div className=\"max-width\">\r\n      <SiteNav></SiteNav>\r\n      <div className=\"dialog\">\r\n        <div className=\"recording-none\">\r\n          <img draggable=\"false\" src={Sleepy} alt=\"\"></img>\r\n          <h4>This session has ended</h4>\r\n          <p>Thank you for using Live Record.</p>\r\n        </div>\r\n        <Link to=\"/\">\r\n          <button className=\"primary-btn\">Home page</button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SessionEnd;\r\n","import { FunctionComponent } from \"react\";\r\nimport { SiteNav } from \"../../components/sitenav\";\r\nimport './start.css';\r\n\r\ninterface Props {}\r\nconst Start: FunctionComponent<Props> = ({}) => {\r\n  return (\r\n    <div className=\"max-width\">\r\n      <SiteNav></SiteNav>\r\n      <div className=\"dialog\">\r\n        <div>\r\n          <h3>Create a session</h3>\r\n          <label\r\n            htmlFor=\"display-name\"\r\n            className=\"input-label\"\r\n            title=\"Enter your email to log in\"\r\n          >\r\n            Display name\r\n          </label>\r\n          <input\r\n            id=\"display-name\"\r\n            placeholder=\"Display name (visible to other users)\"\r\n            className=\"input\"\r\n            // onkeypress=\"return /[a-z]/i.test(event.key)\"\r\n          ></input>\r\n        </div>\r\n        <button className=\"primary-btn\">Start session</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Start;\r\n","export default __webpack_public_path__ + \"static/media/chrome.56af9a41.svg\";","export default __webpack_public_path__ + \"static/media/edge.7d5fb6e4.svg\";","export default __webpack_public_path__ + \"static/media/FaceWithMask.c9919455.png\";","export default __webpack_public_path__ + \"static/media/LiveDemo.7466fab4.png\";","export default __webpack_public_path__ + \"static/media/Selfie.d2486853.png\";","export default __webpack_public_path__ + \"static/media/StarEyes.4ad4346d.png\";","import React, { FunctionComponent } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport chrome from \"../../assets/chrome.svg\";\r\nimport edge from \"../../assets/edge.svg\";\r\nimport FaceWithMask from \"../../assets/FaceWithMask.png\";\r\nimport LiveDemo from \"../../assets/LiveDemo.png\";\r\nimport Selfie from \"../../assets/Selfie.png\";\r\nimport StarEyes from \"../../assets/StarEyes.png\";\r\nimport { SiteNav } from \"../../components/sitenav\";\r\nimport \"./features.css\";\r\nimport \"./hero.css\";\r\n\r\n\r\ninterface Props { }\r\nconst Home: FunctionComponent<Props> = () => {\r\n  return (\r\n    <div className=\"max-width\">\r\n      <SiteNav></SiteNav>\r\n      <div className=\"feature-wrapper\">\r\n        <div id=\"hero-banner\">\r\n          <div className=\"hero-text\">\r\n            <div>\r\n              <h1>Record faster,</h1>\r\n              <h1 id=\"together\">together</h1>\r\n            </div>\r\n            <h5 className=\"\">\r\n              Live Record connects everyone in the presentation process so teams\r\n              can deliver better recordings, faster.\r\n            </h5>\r\n            <Link to=\"/start\">\r\n              <button id=\"hero-button\">Start recording now</button>\r\n            </Link>\r\n          </div>\r\n\r\n          <img className=\"hero-img\" src={LiveDemo} alt=\"\"></img>\r\n        </div>\r\n\r\n        <h3 className=\"title\">Features</h3>\r\n        <div className=\"row-cards\">\r\n          <div className=\"card purple\">\r\n            <img src={Selfie} alt=\"\"></img>\r\n            <h2>Record</h2>\r\n            <p>\r\n              Record the video, audio and screen of everyone in the room.\r\n              Recordings are saved to the host's device.\r\n            </p>\r\n          </div>\r\n          <div className=\"card blue\">\r\n            <img src={StarEyes} alt=\"\"></img>\r\n            <h2>Collaborate</h2>\r\n            <p>\r\n              Collaborate with up to four members of your team in real time with\r\n              screen drawing and shape creation.\r\n            </p>\r\n          </div>\r\n          <div className=\"card yellow\">\r\n            <img src={FaceWithMask} alt=\"\"></img>\r\n            <h2>No accounts</h2>\r\n            <p>\r\n              You can create and join a room quickly. No account required and\r\n              the site works well on any device.\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"long-card\">\r\n          <div>\r\n            <h2>Works best on Chromium browsers</h2>\r\n            <p>\r\n              Ensuring your experience is the best it can be we recommend using\r\n              a Chromium browser like Google Chrome or Microsoft Edge.\r\n            </p>\r\n          </div>\r\n          <div>\r\n            <img src={chrome} alt=\"\"></img>\r\n            <img src={edge} alt=\"\"></img>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"footer\">\r\n          <div>\r\n            <h3>Hello from Toronto,</h3>\r\n            <h3>Canada</h3>\r\n          </div>\r\n          <div className=\"credits\">\r\n            <p>Created by Julian de Rushe, Brian Latchman, Tomasz Cieslak.</p>\r\n            <p>All rights reserved, 2021.</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import localforage from \"localforage\";\r\nimport { v4 as uuid_v4 } from \"uuid\";\r\n\r\nexport interface METADATA {\r\n  _uuid: string;\r\n  date: Date;\r\n  duration: string;\r\n  size: number;\r\n  people: string[];\r\n}\r\n\r\nlocalforage.config({\r\n  driver: localforage.INDEXEDDB, // Force WebSQL; same as using setDriver()\r\n  name: \"myApp\",\r\n  version: 1.0,\r\n  size: 4980736, // Size of database, in bytes. WebSQL-only for now.\r\n  storeName: \"keyvaluepairs\", // Should be alphanumeric, with underscores.\r\n  description: \"some description\",\r\n});\r\n\r\nexport class DataBase {\r\n  private _recordingsDb!: LocalForage;\r\n  private _metadataDb!: LocalForage;\r\n  static _instance: DataBase;\r\n\r\n  static get instance() {\r\n    if (DataBase._instance == null) DataBase._instance = new DataBase();\r\n    return this._instance;\r\n  }\r\n\r\n  public initDB() {\r\n    this._recordingsDb = localforage.createInstance({\r\n      name: \"recordings\",\r\n    });\r\n    this._metadataDb = localforage.createInstance({\r\n      name: \"metadata\",\r\n    });\r\n  }\r\n\r\n  public async getAllMetaData(): Promise<METADATA[]> {\r\n    let allMetaData: METADATA[] = [];\r\n    await this._metadataDb\r\n      .iterate(function (\r\n        value: METADATA,\r\n        key: string,\r\n        iterationNumber: number\r\n      ) {\r\n        allMetaData.push(value);\r\n      })\r\n      .then(function (ret) {})\r\n      .catch(function (err) {\r\n        console.log(err);\r\n      });\r\n    return allMetaData;\r\n  }\r\n\r\n  public async getRecording(_uuid: string): Promise<Blob> {\r\n    let retval = await this._recordingsDb.getItem(_uuid);\r\n    return retval as Blob;\r\n  }\r\n\r\n  public async uploadVideo(\r\n    date: Date,\r\n    duration: string,\r\n    size: number,\r\n    people: string[],\r\n    mp4: Blob\r\n  ): Promise<void> {\r\n    let _uuid: string = uuid_v4();\r\n    let metaData: METADATA = {\r\n      _uuid: _uuid,\r\n      date: date,\r\n      duration: duration,\r\n      size: size,\r\n      people: people,\r\n    };\r\n    await this._metadataDb\r\n      .setItem(_uuid, metaData)\r\n      .then(function (value) {\r\n        console.log(\"metadata uploaded\");\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err);\r\n      });\r\n    await this._recordingsDb\r\n      .setItem(_uuid, mp4)\r\n      .then(function (value) {\r\n        console.log(\"video uploaded\");\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  public async deleteVideo(_uuid: string): Promise<void> {\r\n    await this._metadataDb\r\n      .removeItem(_uuid)\r\n      .then(function () {\r\n        console.log(\"Metadata removed for\", _uuid);\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err);\r\n      });\r\n    await this._recordingsDb\r\n      .removeItem(_uuid)\r\n      .then(function () {\r\n        console.log(\"Recording removed for\", _uuid);\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err);\r\n      });\r\n  }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/Wink.723be5f4.png\";","export const enum SOURCE_TYPE {\r\n    CAMERA,\r\n    SCREEN_SHARE\r\n}\r\n\r\nexport interface Source {\r\n    type: SOURCE_TYPE;\r\n    stream: MediaStream;\r\n}\r\n\r\nexport const enum SIGNALLING_MESSAGE_TYPE {\r\n    SESSION_CREATE,\r\n    CONNECT,\r\n    ICE,\r\n}\r\n\r\nexport interface SignallingMessage<T extends SIGNALLING_MESSAGE_TYPE> {\r\n    id: string;\r\n    type: T;\r\n    data: SignallingMessageOptions[T];\r\n}\r\n\r\nexport interface User {\r\n    id: string;\r\n    name: string;\r\n    sources: Source[];\r\n}\r\n\r\nexport interface ServerUser extends User {\r\n    dataChannel: RTCDataChannel;\r\n    pc: RTCPeerConnection;\r\n}\r\n\r\nexport interface SessionCreateOptions {\r\n    id: string;\r\n}\r\n\r\nexport interface ConnectOptions {\r\n    description: RTCSessionDescription;\r\n    id: string; // Session\r\n}\r\n\r\nexport interface ICEOptions {\r\n    candidate: RTCIceCandidate;\r\n}\r\n\r\nexport interface SignallingMessageOptions {\r\n    [SIGNALLING_MESSAGE_TYPE.SESSION_CREATE]: SessionCreateOptions,\r\n    [SIGNALLING_MESSAGE_TYPE.CONNECT]: ConnectOptions,\r\n    [SIGNALLING_MESSAGE_TYPE.ICE]: ICEOptions,\r\n}\r\n\r\nexport const CONFIG = {\r\n    iceServers: [\r\n        { urls: 'stun:stun.l.google.com:19302' },\r\n        {\r\n            urls: \"turn:129.213.138.47\",\r\n            username: \"webrtc\",\r\n            credential: \"696969\"\r\n        }\r\n    ]\r\n};\r\n\r\nexport const enum MESSAGE_TYPE {\r\n    NEW_USER,\r\n    ICE,\r\n    SDP,\r\n}\r\n\r\nexport interface Message {\r\n    type: MESSAGE_TYPE;\r\n    data: any;\r\n}","import { debugPort } from \"process\";\r\nimport localforage from \"localforage\";\r\nimport { FunctionComponent, useState } from \"react\";\r\nimport { DataBase, METADATA } from \"../../database/database\";\r\nimport { SiteNav } from \"../../components/sitenav\";\r\nimport \"./recordings.css\";\r\nimport { ReactComponent as Svg } from \"../../animations/animate.svg\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Wink from \"../../assets/Wink.png\";\r\n\r\ninterface Props {}\r\nconst Recordings: FunctionComponent<Props> = ({}) => {\r\n  DataBase.instance.initDB();\r\n\r\n  const loadVideos = async () => {\r\n    // await DataBase.instance.uploadVideo(\r\n    //   new Date(),\r\n    //   \"1:15\",\r\n    //   10024,\r\n    //   [\"Tomasz\", \"Brian\", \"Julian\"],\r\n    //   new Blob()\r\n    // );\r\n    DataBase.instance.getAllMetaData().then((res) => {\r\n      setRecordings(res);\r\n    });\r\n  };\r\n\r\n  const [recordings, setRecordings] = useState<METADATA[] | null>(() => {\r\n    loadVideos();\r\n    return null;\r\n  });\r\n\r\n  const uploadVideo = (\r\n    date: Date,\r\n    duration: string,\r\n    size: number,\r\n    people: string[],\r\n    mp4: Blob\r\n  ) => {\r\n    DataBase.instance\r\n      .uploadVideo(date, duration, size, people, mp4)\r\n      .then(() => {\r\n        loadVideos();\r\n      });\r\n  };\r\n\r\n  const getVideo = (_uuid: string) => {\r\n    DataBase.instance\r\n      .getRecording(_uuid)\r\n      .then(function (value) {\r\n        alert(\"download video \".concat(_uuid));\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  const deleteVideo = (_uuid: string) => {\r\n    DataBase.instance\r\n      .deleteVideo(_uuid)\r\n      .then(function (value) {\r\n        loadVideos();\r\n      })\r\n      .catch(function (err) {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  if (recordings && recordings.length === 0) {\r\n    return (\r\n      <div className=\"max-width\">\r\n        <SiteNav></SiteNav>\r\n        <div className=\"dialog\">\r\n          <div className=\"recording-none\">\r\n            <img draggable=\"false\" src={Wink} alt=\"\"></img>\r\n            <h4>So empty in here</h4>\r\n            <p>I wonder what that button does...</p>\r\n          </div>\r\n          <Link to=\"/start\">\r\n            <button className=\"primary-btn\">Start session</button>\r\n          </Link>\r\n          <button\r\n            className=\"primary-btn\"\r\n            onClick={() => {\r\n              uploadVideo(\r\n                new Date(),\r\n                \"1:15\",\r\n                10024,\r\n                [\"Tomasz\", \"Brian\", \"Julian\"],\r\n                new Blob()\r\n              );\r\n            }}\r\n          >\r\n            (TEMP) Upload video\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else if (recordings && recordings.length >= 0) {\r\n    return (\r\n      <div className=\"max-width\">\r\n        <SiteNav></SiteNav>\r\n        <h3>Recordings</h3>\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Duration</th>\r\n              <th>Size</th>\r\n              <th>People</th>\r\n              <th>Controls</th>\r\n            </tr>\r\n            {recordings.map((item, key) => (\r\n              <tr key={key}>\r\n                <td>\r\n                  {item.date.getMonth() +\r\n                    1 +\r\n                    \"-\" +\r\n                    item.date.getDate() +\r\n                    \"-\" +\r\n                    item.date.getFullYear() +\r\n                    \" - \" +\r\n                    item.date.toLocaleString(\"en-US\", {\r\n                      timeZone:\r\n                        Intl.DateTimeFormat().resolvedOptions().timeZone,\r\n                      hour: \"numeric\",\r\n                      minute: \"numeric\",\r\n                      hour12: true,\r\n                    })}\r\n                </td>\r\n                <td>{item[\"duration\"]}</td>\r\n                <td>{JSON.stringify(item.size)}</td>\r\n                <td>{item.people.join(\", \")}</td>\r\n                <td>\r\n                  <button onClick={() => getVideo(item._uuid)}>Download</button>\r\n                  <button onClick={() => deleteVideo(item._uuid)}>\r\n                    Delete\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <button\r\n            className=\"primary-btn\"\r\n            onClick={() => {\r\n              uploadVideo(\r\n                new Date(),\r\n                \"1:15\",\r\n                10024,\r\n                [\"Tomasz\", \"Brian\", \"Julian\"],\r\n                new Blob()\r\n              );\r\n            }}\r\n          >\r\n            (TEMP) Upload video\r\n          </button>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"max-width\">\r\n        <SiteNav></SiteNav>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Recordings;\r\n","import { SignallingMessageOptions, SIGNALLING_MESSAGE_TYPE } from \"./types\";\r\n\r\nexport class SignallingConnection {\r\n  signalingConnection: WebSocket | null = null;\r\n\r\n  signalingSend<K extends SIGNALLING_MESSAGE_TYPE>(type: K, event: SignallingMessageOptions[K], id: string = \"\") {\r\n    this.signalingConnection?.send(JSON.stringify({ id: id, type: type, data: event }));\r\n  }\r\n\r\n  signalingConnect() {\r\n    return new Promise<void>((resolve, reject) => {\r\n      if (this.signalingConnection && this.signalingConnection.OPEN) {\r\n        this.signalingConnection.close();\r\n      }\r\n\r\n      this.signalingConnection = new WebSocket(true ? `ws://${window.location.hostname}:25566` : process.env.REACT_APP_WS_URL!);\r\n\r\n      this.signalingConnection.onmessage = this.onSignalingMessage;\r\n\r\n      this.signalingConnection.onclose = () => {\r\n        console.log(\"Signalling Closed\");\r\n        reject();\r\n      };\r\n\r\n      this.signalingConnection.onerror = (error) => {\r\n        console.error(\"onerror\", error);\r\n        reject(error);\r\n      };\r\n\r\n      this.signalingConnection.onopen = () => {\r\n        console.log(\"Signalling Opened\");\r\n        resolve();\r\n      };\r\n    });\r\n  }\r\n\r\n  onSignalingMessage = async (event: MessageEvent) => { };\r\n}\r\n","import { SignallingConnection } from \"./signallingConnection\";\r\nimport { CONFIG, Message, MESSAGE_TYPE, SignallingMessage, SIGNALLING_MESSAGE_TYPE, User } from \"./types\";\r\n\r\nexport class Client extends SignallingConnection {\r\n    users: User[] = [];\r\n    serverChannel: RTCDataChannel | null = null;\r\n    serverConn: RTCPeerConnection | null = null;\r\n    candidates: RTCIceCandidate[] = [];\r\n    userId: string = \"\";\r\n\r\n    connect = async (sessionId: string) => {\r\n        return new Promise<void>(async (resolve, reject) => {\r\n            console.log(\"Connecting...\");\r\n            this.userId = \"\";\r\n            await this.signalingConnect();\r\n\r\n            this.serverConn = new RTCPeerConnection(CONFIG);\r\n            this.serverChannel = this.serverConn.createDataChannel(\"general\", { negotiated: true, id: 0 });\r\n\r\n            let makingOffer = false;\r\n            let ignoreOffer = false;\r\n\r\n            this.serverChannel.addEventListener(\"open\", (event) => {\r\n                console.log(\"OPENED\");\r\n                resolve();\r\n                if (!this.serverConn || !this.serverChannel) return;\r\n                console.log(`Client: Con: ${this.serverConn.connectionState}, ICE: ${this.serverConn.iceConnectionState}`);\r\n\r\n                this.serverConn.onicecandidate = ({ candidate }) => {\r\n                    if (candidate) {\r\n                        this.serverChannel?.send(JSON.stringify({ type: MESSAGE_TYPE.ICE, data: candidate }));\r\n                    }\r\n                };\r\n\r\n                this.serverConn.onnegotiationneeded = async () => {\r\n                    if (!this.serverConn || !this.serverChannel) return;\r\n                    console.log(\"New SDP Needed\");\r\n                    try {\r\n                        makingOffer = true;\r\n                        await this.serverConn.setLocalDescription();\r\n                        this.serverChannel.send(JSON.stringify({ type: MESSAGE_TYPE.SDP, data: this.serverConn.localDescription }));\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                    } finally {\r\n                        makingOffer = false;\r\n                    }\r\n                };\r\n\r\n                console.log(\"Connected\");\r\n\r\n\r\n                // Testing\r\n                // let vid = document.createElement(\"video\") as HTMLVideoElement;\r\n                // vid.src = \"./To delete if leah doesnt want 2.mp4\";\r\n                // let mediaStream = (vid as any).captureStream();\r\n                // vid.play();\r\n                // for (const track of mediaStream.getTracks()) {\r\n                //     this.serverConn?.addTrack(track, mediaStream);\r\n                // }\r\n\r\n                // navigator.mediaDevices.getDisplayMedia().then((captureStream) => {\r\n                //     for (const track of captureStream.getTracks()) {\r\n                //         this.serverConn?.addTrack(track, captureStream);\r\n                //     }\r\n                // });\r\n                // navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then((captureStream) => {\r\n                //     for (const track of captureStream.getTracks()) {\r\n                //         this.serverConn?.addTrack(track, captureStream);\r\n                //     }\r\n                // });\r\n            });\r\n\r\n            this.serverChannel.onmessage = async (event) => {\r\n                if (!this.serverConn || !this.serverChannel) return;\r\n\r\n                let message = JSON.parse(event.data) as Message;\r\n\r\n                if (message.type === MESSAGE_TYPE.SDP) {\r\n                    try {\r\n                        const description = message.data;\r\n                        const offerCollision = (description.type === \"offer\") &&\r\n                            (makingOffer || this.serverConn.signalingState !== \"stable\");\r\n\r\n                        ignoreOffer = offerCollision;\r\n                        if (ignoreOffer) {\r\n                            return;\r\n                        }\r\n\r\n                        console.log(`New remote SDP, Type: ${description.type}`);\r\n\r\n                        await this.serverConn.setRemoteDescription(description);\r\n                        if (description.type === \"offer\") {\r\n                            await this.serverConn.setLocalDescription();\r\n                            this.serverChannel.send(JSON.stringify({ type: MESSAGE_TYPE.SDP, data: this.serverConn.localDescription }));\r\n                        }\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                    }\r\n                } else if (message.type === MESSAGE_TYPE.ICE) {\r\n                    try {\r\n                        await this.serverConn.addIceCandidate(message.data);\r\n                    } catch (err) {\r\n                        if (!ignoreOffer) {\r\n                            throw err;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            this.serverConn.oniceconnectionstatechange = () => {\r\n                if (this.serverConn?.iceConnectionState === \"failed\") {\r\n                    this.serverConn.restartIce();\r\n                }\r\n            };\r\n\r\n            this.serverConn.onicecandidate = ({ candidate }) => {\r\n                if (!candidate) { return; }\r\n                this.candidates.push(candidate);\r\n\r\n                if (this.userId) { return; }\r\n\r\n                // Flush candidates\r\n                for (let i = 0; i < this.candidates.length; i++) {\r\n                    this.signalingSend(SIGNALLING_MESSAGE_TYPE.ICE, { candidate: this.candidates[i] });\r\n                }\r\n\r\n                this.candidates.splice(0, this.candidates.length);\r\n            };\r\n\r\n            await this.serverConn.setLocalDescription();\r\n            this.signalingSend(SIGNALLING_MESSAGE_TYPE.CONNECT, { description: this.serverConn.localDescription!, id: sessionId });\r\n        });\r\n    };\r\n\r\n    onSignalingMessage = async (event: MessageEvent) => {\r\n        const data = JSON.parse(event.data);\r\n        console.log(data);\r\n\r\n        if (data.type === SIGNALLING_MESSAGE_TYPE.ICE) {\r\n            const message = data as SignallingMessage<SIGNALLING_MESSAGE_TYPE.ICE>;\r\n            await this.serverConn?.addIceCandidate(message.data.candidate);\r\n        } else if (data.type === SIGNALLING_MESSAGE_TYPE.CONNECT) {\r\n            const message = data as SignallingMessage<SIGNALLING_MESSAGE_TYPE.CONNECT>;\r\n            if (!this.serverConn) return;\r\n\r\n            this.userId = message.data.id;\r\n\r\n            // Flush candidates\r\n            for (let i = 0; i < this.candidates.length; i++) {\r\n                this.signalingSend(SIGNALLING_MESSAGE_TYPE.ICE, { candidate: this.candidates[i] });\r\n            }\r\n\r\n            this.candidates.splice(0, this.candidates.length);\r\n\r\n            await this.serverConn.setRemoteDescription(message.data.description);\r\n        }\r\n    };\r\n}","import { SignallingConnection } from \"./signallingConnection\";\r\nimport { CONFIG, Message, MESSAGE_TYPE, ServerUser, SignallingMessage, SIGNALLING_MESSAGE_TYPE } from \"./types\";\r\n\r\nexport class Server extends SignallingConnection {\r\n    users: ServerUser[] = [];\r\n    sessionCreateResolve: ((code: string) => void) | null = null;\r\n\r\n    async start() {\r\n        return new Promise<string>(async (resolve, reject) => {\r\n            this.sessionCreateResolve = resolve;\r\n            await this.signalingConnect();\r\n            this.signalingSend(SIGNALLING_MESSAGE_TYPE.SESSION_CREATE, { id: \"\" });\r\n        });\r\n    }\r\n\r\n    onVideo = (event: RTCTrackEvent) => {\r\n    };\r\n\r\n    onSignalingMessage = async (event: MessageEvent) => {\r\n        const data = JSON.parse(event.data);\r\n\r\n        if (data.type === SIGNALLING_MESSAGE_TYPE.CONNECT) {\r\n            const message = data as SignallingMessage<SIGNALLING_MESSAGE_TYPE.CONNECT>;\r\n            let pc = new RTCPeerConnection(CONFIG);\r\n\r\n            let dataChannel = pc.createDataChannel(\"general\", { negotiated: true, id: 0, });\r\n            let candidates: RTCIceCandidate[] = [];\r\n            let id = \"\";\r\n\r\n            dataChannel.addEventListener(\"open\", (event) => {\r\n                console.log(`Server: Con: ${pc.connectionState}, ICE: ${pc.iceConnectionState}, SIGNAL: ${pc.signalingState}}`);\r\n\r\n                pc.onicecandidate = ({ candidate }) => {\r\n                    if (candidate) {\r\n                        dataChannel.send(JSON.stringify({ type: MESSAGE_TYPE.ICE, data: candidate }));\r\n                    }\r\n                };\r\n\r\n                pc.onnegotiationneeded = async () => {\r\n                    try {\r\n                        await pc.setLocalDescription();\r\n                        dataChannel.send(JSON.stringify({ type: MESSAGE_TYPE.SDP, data: pc.localDescription }));\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                    }\r\n                };\r\n            });\r\n\r\n            dataChannel.onmessage = async (event) => {\r\n                let message = JSON.parse(event.data) as Message;\r\n\r\n                if (message.type === MESSAGE_TYPE.SDP) {\r\n                    try {\r\n                        const description = message.data;\r\n\r\n                        console.log(`New remote SDP, Type: ${description.type}`);\r\n\r\n                        await pc.setRemoteDescription(description);\r\n                        if (description.type === \"offer\") {\r\n                            await pc.setLocalDescription();\r\n                            dataChannel.send(JSON.stringify({ type: MESSAGE_TYPE.SDP, data: pc.localDescription }));\r\n                        }\r\n                    } catch (err) {\r\n                        console.error(err);\r\n                    }\r\n                } else if (message.type === MESSAGE_TYPE.ICE) {\r\n                    try {\r\n                        await pc.addIceCandidate(message.data);\r\n                    } catch (err) {\r\n                        throw err;\r\n                    }\r\n                }\r\n            };\r\n\r\n            pc.ontrack = (event) => {\r\n                this.onVideo(event);\r\n            };\r\n\r\n            pc.oniceconnectionstatechange = () => {\r\n                if (pc.iceConnectionState === \"failed\") {\r\n                    pc.restartIce();\r\n                }\r\n            };\r\n\r\n            pc.onicecandidate = ({ candidate }) => {\r\n                if (!candidate) { return; }\r\n                candidates.push(candidate);\r\n\r\n                if (!id) { return; }\r\n\r\n                // Flush candidates\r\n                for (let i = 0; i < candidates.length; i++) {\r\n                    this.signalingSend(SIGNALLING_MESSAGE_TYPE.ICE, { candidate: candidates[i] }, user.id);\r\n                }\r\n                candidates.splice(0, candidates.length);\r\n            };\r\n\r\n            // Create new user\r\n            id = String(Math.floor(Math.random() * 999999)).padStart(6, \"0\");\r\n            let user = { name: \"\", sources: [], pc: pc, id: id, dataChannel: dataChannel };\r\n            this.users.push(user);\r\n\r\n            // Create answer\r\n            await pc.setRemoteDescription(message.data.description);\r\n            await pc.setLocalDescription();\r\n            if (!pc.localDescription) return;\r\n\r\n            this.signalingSend(SIGNALLING_MESSAGE_TYPE.CONNECT, { description: pc.localDescription, id: user.id }, message.id);\r\n\r\n            // Flush candidates\r\n            for (let i = 0; i < candidates.length; i++) {\r\n                this.signalingSend(SIGNALLING_MESSAGE_TYPE.ICE, { candidate: candidates[i] }, user.id);\r\n            }\r\n            candidates.splice(0, candidates.length);\r\n        } else if (data.type === SIGNALLING_MESSAGE_TYPE.ICE) {\r\n            const message = data as SignallingMessage<SIGNALLING_MESSAGE_TYPE.ICE>;\r\n\r\n            for (let i = 0; i < this.users.length; i++) {\r\n                if (this.users[i].id === message.id) {\r\n                    console.log(\"ADDED\");\r\n                    await this.users[i].pc.addIceCandidate(message.data.candidate);\r\n                    break;\r\n                }\r\n            }\r\n        } else if (data.type === SIGNALLING_MESSAGE_TYPE.SESSION_CREATE) {\r\n            const message = data as SignallingMessage<SIGNALLING_MESSAGE_TYPE.SESSION_CREATE>;\r\n            if (this.sessionCreateResolve) {\r\n                this.sessionCreateResolve(message.data.id);\r\n            }\r\n        }\r\n    };\r\n}","import { createRef, FunctionComponent, useState } from \"react\";\r\nimport { SiteNav } from \"../../components/sitenav\";\r\nimport { Client } from \"../../network/client\";\r\nimport { Server } from \"../../network/server\";\r\n\r\ninterface Props {}\r\nconst Session: FunctionComponent<Props> = () => {\r\n  const [client, setClient] = useState(new Client());\r\n  const [server, setServer] = useState(new Server());\r\n  const [sessionId, setSessionId] = useState(\"\");\r\n  const videoRef = createRef<HTMLVideoElement>();\r\n\r\n  const startServer = () => {\r\n    server.onVideo = (event: RTCTrackEvent) => {\r\n      console.log(\"Event:\", event);\r\n      let ref = document.getElementById(\"video\") as HTMLVideoElement;\r\n      ref.srcObject = event.streams[0];\r\n      console.log(\"SRC:\", ref.srcObject);\r\n    };\r\n\r\n    console.log(\"Starting Server...\");\r\n    server.start().then((id) => {\r\n      setSessionId(id);\r\n      console.log(\"Server Started\");\r\n      console.log(`Session Id: ${id}`);\r\n    });\r\n  };\r\n\r\n  const joinServer = () => {\r\n    client.connect(sessionId).then(() => {});\r\n  };\r\n  return (\r\n    <div className=\"max-width\">\r\n      <SiteNav></SiteNav>\r\n      <button onClick={startServer}>Start Server</button>\r\n      <input\r\n        value={sessionId}\r\n        onChange={(event) => setSessionId(event.target.value)}\r\n      />\r\n      <button onClick={joinServer}>Join</button>\r\n      <video ref={videoRef} id=\"video\"></video>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Session;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport \"./App.css\";\r\nimport Join from \"./routes/cards/join\";\r\nimport SessionEnd from \"./routes/cards/session-end\";\r\nimport Start from \"./routes/cards/start\";\r\nimport Home from \"./routes/home/home\";\r\nimport Recordings from \"./routes/recordings/recordings\";\r\nimport Room from \"./routes/room/room\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        <Route path=\"/start\">\r\n          <Start></Start>\r\n        </Route>\r\n        <Route path=\"/recordings\">\r\n          <Recordings></Recordings>\r\n        </Route>\r\n        <Route path=\"/join\">\r\n          <Join></Join>\r\n        </Route>\r\n        <Route path=\"/room\">\r\n          <Room></Room>\r\n        </Route>\r\n        <Route path=\"/session-end\">\r\n          <SessionEnd></SessionEnd>\r\n        </Route>\r\n        <Route path=\"/\">\r\n          <Home></Home>\r\n        </Route>\r\n      </Switch>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}